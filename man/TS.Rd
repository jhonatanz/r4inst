% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TS.R
\name{TS}
\alias{TS}
\title{R6 Class Representing a Terminal Strip}
\value{
a data frame with the structure of the
terminal strip.
}
\description{
The class 'TS' defines various fields and methods for terminal strips that
allows:
\itemize{
\item Create a terminal strip: given a name, a device and type of terminal.
\item Create a structure of terminal strip given a quantity of terminals.
\item Add terminals to connect a cable.
\item Connect a cable conductor to terminals in the strip.
}
}
\details{
The TS objects can be of two types: "end" and "pass".

The "end" terminal strip type is used for devices at the end of a path, i.e
instruments, control panels, final elements, control systems.

The "pass" terminal strip type is used for Junction Boxes or marshalling
panels in which the terminals will have two sides: "input" and "output", and
terminal will connect two ends of cables.
}
\examples{

## ------------------------------------------------
## Method `TS$add_cable`
## ------------------------------------------------

# Addition of a new cable to an existing terminal strip
New_TS <- TS$new("TS-001", "JB-001", "pass")
New_TS$gen_struct(3)
(New_TS_df <- New_TS$df_struct())

New_cable <- CB$new("CB-001")
New_cable$gen_struct("pair", 1, TRUE, FALSE)

New_TS$add_cable(New_cable, side = "input")
(New_TS_df_updated <- New_TS$df_struct())

## ------------------------------------------------
## Method `TS$con_cable`
## ------------------------------------------------

# Connection of a cable to an existing terminal strip
New_TS <- TS$new("TS-001", "JB-001", "end")
New_TS$gen_struct(3)
(New_TS_df <- New_TS$df_struct())

New_cable <- CB$new("CB-001")
New_cable$gen_struct("pair", 1, TRUE, FALSE)

New_TS$con_cable(New_cable, init = 1)

(New_TS_df_upt <- New_TS$df_struct())

## ------------------------------------------------
## Method `TS$df_struct`
## ------------------------------------------------

# Conversion of terminal strip structure to a data frame
New_TS<- TS$new("TS-001", "JB-001", "end")
New_TS$gen_struct(5)

(df_struct <- New_TS$df_struct())
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tag}}{Terminal strip name: character.}

\item{\code{device}}{Device to which terminal strip belongs:
character.}

\item{\code{term_type}}{Terminals type in the strip,
"end" for terminals at the end of a path and "pass"
for terminals that connects two connectors: character.}

\item{\code{term_qty}}{quantity of terminals in strip:
numeric, int.}

\item{\code{struct}}{Data structure for connections.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TS-new}{\code{TS$new()}}
\item \href{#method-TS-gen_struct}{\code{TS$gen_struct()}}
\item \href{#method-TS-add_terminal}{\code{TS$add_terminal()}}
\item \href{#method-TS-add_cable}{\code{TS$add_cable()}}
\item \href{#method-TS-con_cable}{\code{TS$con_cable()}}
\item \href{#method-TS-df_struct}{\code{TS$df_struct()}}
\item \href{#method-TS-print}{\code{TS$print()}}
\item \href{#method-TS-clone}{\code{TS$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-new"></a>}}
\if{latex}{\out{\hypertarget{method-TS-new}{}}}
\subsection{Method \code{new()}}{
Create a new TS object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$new(tag, device, term_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tag}}{terminal strip tag.}

\item{\code{device}}{device to which the terminal strip
belongs}

\item{\code{term_type}}{erminal type to be used: "end"
or "pass.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{TS} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-gen_struct"></a>}}
\if{latex}{\out{\hypertarget{method-TS-gen_struct}{}}}
\subsection{Method \code{gen_struct()}}{
Creates the structure of terminals object. Modifies
the struct field of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$gen_struct(term_qty)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{term_qty}}{Quantity of terminals required.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-add_terminal"></a>}}
\if{latex}{\out{\hypertarget{method-TS-add_terminal}{}}}
\subsection{Method \code{add_terminal()}}{
Add the specified quantity of terminals at the end of the
current TS object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$add_terminal(qty)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{qty}}{Quantity of terminals to be added.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-add_cable"></a>}}
\if{latex}{\out{\hypertarget{method-TS-add_cable}{}}}
\subsection{Method \code{add_cable()}}{
Add terminals to the terminal strip at the end of it and
connect a cable to those.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$add_cable(cable, side = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cable}}{a cable object to be added}

\item{\code{side}}{input or output side, for pass type
terminal strips}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Addition of a new cable to an existing terminal strip
New_TS <- TS$new("TS-001", "JB-001", "pass")
New_TS$gen_struct(3)
(New_TS_df <- New_TS$df_struct())

New_cable <- CB$new("CB-001")
New_cable$gen_struct("pair", 1, TRUE, FALSE)

New_TS$add_cable(New_cable, side = "input")
(New_TS_df_updated <- New_TS$df_struct())
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-con_cable"></a>}}
\if{latex}{\out{\hypertarget{method-TS-con_cable}{}}}
\subsection{Method \code{con_cable()}}{
Connect cable to existing terminals. If not enough
terminals available for connect the cable, raise an
error. Will overwrite existing connections.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$con_cable(cable, side = NULL, init)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cable}}{a cable object to be added.}

\item{\code{side}}{input or output side, for "pass" type
terminal strips, if "end" terminal type, this parameter
will be ignored.}

\item{\code{init}}{initial terminal to use to connect the cable,
this and the subsequent terminals will be used until the
whole cable is connected.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Connection of a cable to an existing terminal strip
New_TS <- TS$new("TS-001", "JB-001", "end")
New_TS$gen_struct(3)
(New_TS_df <- New_TS$df_struct())

New_cable <- CB$new("CB-001")
New_cable$gen_struct("pair", 1, TRUE, FALSE)

New_TS$con_cable(New_cable, init = 1)

(New_TS_df_upt <- New_TS$df_struct())
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-df_struct"></a>}}
\if{latex}{\out{\hypertarget{method-TS-df_struct}{}}}
\subsection{Method \code{df_struct()}}{
Converts the 'struct' field to a data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$df_struct()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Conversion of terminal strip structure to a data frame
New_TS<- TS$new("TS-001", "JB-001", "end")
New_TS$gen_struct(5)

(df_struct <- New_TS$df_struct())
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-print"></a>}}
\if{latex}{\out{\hypertarget{method-TS-print}{}}}
\subsection{Method \code{print()}}{
print the information for terminal strip objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TS-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TS-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TS$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
